[{"content":" # 下载补丁 下载好后的jetbra文件夹如下 # 破解 将/jetbra文件夹复制到电脑某个路径，且路径不能含有空格和中文\nMac：在终端中打开这个文件夹，进入/jetbra/scripts执行install.sh 脚本 Win：点击进入 /jetbra 补丁目录，再点击进入 /scripts 文件夹，双击执行 install-current-user.vbs 脚本： # 激活 将激活码复制到Activation Code即可\n# IDEA 1 6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0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 # DataGrip 1 VPQ9LWBJ0Z-eyJsaWNlbnNlSWQiOiJWUFE5TFdCSjBaIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwOTAyUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotMjI4OTE3MTciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Y35sXvjNUN0+WMouR7PGFzl62+ApqSBgPjwganzPG1ErZKJS1xh3O8MbkZnjiTPkjODi+pyBGjozBojATCzTGx4uCt61zccnyF+XI1fE9H9WTA5DAO3/maxGFJ2KthOmkuktNnNi9qa0n7EyRuZ8rVVrc5+ETiEcfo2GctNcGqHKuRF96Bf8EL1GmCOkI8vU293X+n3XKEmN+Q1hEEBGbP9yiF5zhZDzFq0svj8g4c0fnTOrCc4GKyyEps6aDW2/DurkotUFddzDhTCyoW1Gao0EZt0AnWUALsogI9ABjdtJq3ndyvuMrXTlOr2C/hCGjqIN8ZDA0gf9mnrKBhcMbA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD # WebStorm 1 8R927DG13X-eyJsaWNlbnNlSWQiOiI4UjkyN0RHMTNYIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOjIwMTEzMjMwMjYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Jev3eIT6wPDh59rzeBG67oHD8GcYHifz9+OkIePP3Qo49dGX1DqLTGJgOxSClHrshRzjOktdBYwkwpeTrDMwgeGu+cy0OhzvtQMeh7R3HrEQkhGbNBjfpbW6nq6Mhv8k6Duoiw3XiU434V5iM6DgRN3Yzo8VKxU7Kb4u/SQnPTd+PR64hYJjblVXUzGHZUX4w8RBej3T0EREccs36bfnnPC2X91K/qbvr9C0uY/feHAMpuekMks0v4qApbInpw5O+elLE3l8txlNWhWSC8m/O/S7iydf27hV5mgePM5422Rpvm4dmA2DIQcq7xxdt4X67DmVGMC2yIFiH4hfkqySWg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD # More 产品激活码 激活服务器\n","date":"2023-11-04T00:00:00Z","permalink":"https://zhaochengcube.github.io/post/jetbrains-hack/","title":"JetBrains系列破解+激活"},{"content":" # MySQL 字符串函数 函数 描述 实例 ASCII(s) 返回字符串 s 的第一个字符的 ASCII 码。 返回 CustomerName 字段第一个字母的 ASCII 码：\nSELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers; CHAR_LENGTH(s) 返回字符串 s 的字符数 返回字符串 RUNOOB 的字符数\nSELECT CHAR_LENGTH(\u0026ldquo;RUNOOB\u0026rdquo;) AS LengthOfString; CHARACTER_LENGTH(s) 返回字符串 s 的字符数，等同于 CHAR_LENGTH(s) 返回字符串 RUNOOB 的字符数\nSELECT CHARACTER_LENGTH(\u0026ldquo;RUNOOB\u0026rdquo;) AS LengthOfString; CONCAT(s1,s2\u0026hellip;sn) 字符串 s1,s2 等多个字符串合并为一个字符串 合并多个字符串\nSELECT CONCAT(\u0026ldquo;SQL \u0026ldquo;, \u0026ldquo;Runoob \u0026ldquo;, \u0026ldquo;Gooogle \u0026ldquo;, \u0026ldquo;Facebook\u0026rdquo;) AS ConcatenatedString; CONCAT_WS(x, s1,s2\u0026hellip;sn) 同 CONCAT(s1,s2,\u0026hellip;) 函数，但是每个字符串之间要加上 x，x 可以是分隔符 合并多个字符串，并添加分隔符：\nSELECT CONCAT_WS(\u0026rdquo;-\u0026rdquo;, \u0026ldquo;SQL\u0026rdquo;, \u0026ldquo;Tutorial\u0026rdquo;, \u0026ldquo;is\u0026rdquo;, \u0026ldquo;fun!\u0026quot;)AS ConcatenatedString; FIELD(s,s1,s2\u0026hellip;) 返回第一个字符串 s 在字符串列表(s1,s2\u0026hellip;)中的位置 返回字符串 c 在列表值中的位置：\nSELECT FIELD(\u0026ldquo;c\u0026rdquo;, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;, \u0026ldquo;e\u0026rdquo;); FIND_IN_SET(s1,s2) 返回在字符串s2中与s1匹配的字符串的位置 返回字符串 c 在指定字符串中的位置：\nSELECT FIND_IN_SET(\u0026ldquo;c\u0026rdquo;, \u0026ldquo;a,b,c,d,e\u0026rdquo;); FORMAT(x,n) 函数可以将数字 x 进行格式化 \u0026ldquo;#,###.##\u0026rdquo;, 将 x 保留到小数点后 n 位，最后一位四舍五入。 格式化数字 \u0026ldquo;#,###.##\u0026rdquo; 形式：\nSELECT FORMAT(250500.5634, 2); \u0026ndash; 输出 250,500.56 INSERT(s1,x,len,s2) 字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串 从字符串第一个位置开始的 6 个字符替换为 runoob：\nSELECT INSERT(\u0026ldquo;google.com\u0026rdquo;, 1, 6, \u0026ldquo;runoob\u0026rdquo;); \u0026ndash; 输出：runoob.com LOCATE(s1,s) 从字符串 s 中获取 s1 的开始位置 获取 b 在字符串 abc 中的位置：\nSELECT LOCATE(\u0026lsquo;st\u0026rsquo;,\u0026lsquo;myteststring\u0026rsquo;); \u0026ndash; 5\n返回字符串 abc 中 b 的位置：\nSELECT LOCATE(\u0026lsquo;b\u0026rsquo;, \u0026lsquo;abc\u0026rsquo;) \u0026ndash; 2 LCASE(s) 将字符串 s 的所有字母变成小写字母 字符串 RUNOOB 转换为小写：\nSELECT LCASE(\u0026lsquo;RUNOOB\u0026rsquo;) \u0026ndash; runoob LEFT(s,n) 返回字符串 s 的前 n 个字符 返回字符串 runoob 中的前两个字符：\nSELECT LEFT(\u0026lsquo;runoob\u0026rsquo;,2) \u0026ndash; ru LOWER(s) 将字符串 s 的所有字母变成小写字母 字符串 RUNOOB 转换为小写：\nSELECT LOWER(\u0026lsquo;RUNOOB\u0026rsquo;) \u0026ndash; runoob LPAD(s1,len,s2) 在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len 将字符串 xx 填充到 abc 字符串的开始处：\nSELECT LPAD(\u0026lsquo;abc\u0026rsquo;,5,\u0026lsquo;xx\u0026rsquo;) \u0026ndash; xxabc LTRIM(s) 去掉字符串 s 开始处的空格 去掉字符串 RUNOOB开始处的空格：\nSELECT LTRIM(\u0026rdquo; RUNOOB\u0026rdquo;) AS LeftTrimmedString;\u0026ndash; RUNOOB MID(s,n,len) 从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s,n,len) 从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：\nSELECT MID(\u0026ldquo;RUNOOB\u0026rdquo;, 2, 3) AS ExtractString; \u0026ndash; UNO POSITION(s1 IN s) 从字符串 s 中获取 s1 的开始位置 返回字符串 abc 中 b 的位置：\nSELECT POSITION(\u0026lsquo;b\u0026rsquo; in \u0026lsquo;abc\u0026rsquo;) \u0026ndash; 2 REPEAT(s,n) 将字符串 s 重复 n 次 将字符串 runoob 重复三次：\nSELECT REPEAT(\u0026lsquo;runoob\u0026rsquo;,3) \u0026ndash; runoobrunoobrunoob REPLACE(s,s1,s2) 将字符串 s2 替代字符串 s 中的字符串 s1 将字符串 abc 中的字符 a 替换为字符 x：\nSELECT REPLACE(\u0026lsquo;abc\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,\u0026lsquo;x\u0026rsquo;) \u0026ndash;xbc REVERSE(s) 将字符串s的顺序反过来 将字符串 abc 的顺序反过来：\nSELECT REVERSE(\u0026lsquo;abc\u0026rsquo;) \u0026ndash; cba RIGHT(s,n) 返回字符串 s 的后 n 个字符 返回字符串 runoob 的后两个字符：\nSELECT RIGHT(\u0026lsquo;runoob\u0026rsquo;,2) \u0026ndash; ob RPAD(s1,len,s2) 在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len 将字符串 xx 填充到 abc 字符串的结尾处：\nSELECT RPAD(\u0026lsquo;abc\u0026rsquo;,5,\u0026lsquo;xx\u0026rsquo;) \u0026ndash; abcxx RTRIM(s) 去掉字符串 s 结尾处的空格 去掉字符串 RUNOOB 的末尾空格：\nSELECT RTRIM(\u0026ldquo;RUNOOB \u0026ldquo;) AS RightTrimmedString; \u0026ndash; RUNOOB SPACE(n) 返回 n 个空格 返回 10 个空格：\nSELECT SPACE(10); STRCMP(s1,s2) 比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1\u0026gt;s2 返回 1，如果 s1\u0026lt;s2 返回 -1 比较字符串：\nSELECT STRCMP(\u0026ldquo;runoob\u0026rdquo;, \u0026ldquo;runoob\u0026rdquo;); \u0026ndash; 0 SUBSTR(s, start, length) 从字符串 s 的 start 位置截取长度为 length 的子字符串 从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：\nSELECT SUBSTR(\u0026ldquo;RUNOOB\u0026rdquo;, 2, 3) AS ExtractString; \u0026ndash; UNO SUBSTRING(s, start, length) 从字符串 s 的 start 位置截取长度为 length 的子字符串，等同于 SUBSTR(s, start, length) 从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：\nSELECT SUBSTRING(\u0026ldquo;RUNOOB\u0026rdquo;, 2, 3) AS ExtractString; \u0026ndash; UNO SUBSTRING_INDEX(s, delimiter, number) 返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。\n如果 number 是正数，返回第 number 个字符左边的字符串。\n如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。 SELECT SUBSTRING_INDEX(\u0026lsquo;ab\u0026rsquo;,\u0026rsquo;\u0026rsquo;,1) \u0026ndash; a SELECT SUBSTRING_INDEX(\u0026lsquo;ab\u0026rsquo;,\u0026rsquo;\u0026rsquo;,-1) \u0026ndash; b SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(\u0026lsquo;abcde\u0026rsquo;,\u0026rsquo;\u0026rsquo;,3),\u0026rsquo;\u0026rsquo;,-1) \u0026ndash; c TRIM(s) 去掉字符串 s 开始和结尾处的空格 去掉字符串 RUNOOB 的首尾空格：\nSELECT TRIM(\u0026rsquo; RUNOOB \u0026lsquo;) AS TrimmedString; UCASE(s) 将字符串转换为大写 将字符串 runoob 转换为大写：\nSELECT UCASE(\u0026ldquo;runoob\u0026rdquo;); \u0026ndash; RUNOOB UPPER(s) 将字符串转换为大写 将字符串 runoob 转换为大写：\nSELECT UPPER(\u0026ldquo;runoob\u0026rdquo;); \u0026ndash; RUNOOB # MySQL 数字函数 函数名 描述 实例 ABS(x) 返回 x 的绝对值 返回 -1 的绝对值：\nSELECT ABS(-1) \u0026ndash; 返回1 ACOS(x) 求 x 的反余弦值（单位为弧度），x 为一个数值 SELECT ACOS(0.25); ASIN(x) 求反正弦值（单位为弧度），x 为一个数值 SELECT ASIN(0.25); ATAN(x) 求反正切值（单位为弧度），x 为一个数值 SELECT ATAN(2.5); ATAN2(n, m) 求反正切值（单位为弧度） SELECT ATAN2(-0.8, 2); AVG(expression) 返回一个表达式的平均值，expression 是一个字段 返回 Products 表中Price 字段的平均值：\nSELECT AVG(Price) AS AveragePrice FROM Products; CEIL(x) 返回大于或等于 x 的最小整数 SELECT CEIL(1.5) \u0026ndash; 返回2 CEILING(x) 返回大于或等于 x 的最小整数 SELECT CEILING(1.5); \u0026ndash; 返回2 COS(x) 求余弦值(参数是弧度) SELECT COS(2); COT(x) 求余切值(参数是弧度) SELECT COT(6); COUNT(expression) 返回查询的记录总数，expression 参数是一个字段或者 * 号 返回 Products 表中 products 字段总共有多少条记录：\nSELECT COUNT(ProductID) AS NumberOfProducts FROM Products; DEGREES(x) 将弧度转换为角度 SELECT DEGREES(3.1415926535898) \u0026ndash; 180 n DIV m 整除，n 为被除数，m 为除数 计算 10 除于 5：\nSELECT 10 DIV 5; \u0026ndash; 2 EXP(x) 返回 e 的 x 次方 计算 e 的三次方：\nSELECT EXP(3) \u0026ndash; 20.085536923188 FLOOR(x) 返回小于或等于 x 的最大整数 小于或等于 1.5 的整数：\nSELECT FLOOR(1.5) \u0026ndash; 返回1 GREATEST(expr1, expr2, expr3, \u0026hellip;) 返回列表中的最大值 返回以下数字列表中的最大值：\nSELECT GREATEST(3, 12, 34, 8, 25); \u0026ndash; 34\n返回以下字符串列表中的最大值：\nSELECT GREATEST(\u0026ldquo;Google\u0026rdquo;, \u0026ldquo;Runoob\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;); \u0026ndash; Runoob LEAST(expr1, expr2, expr3, \u0026hellip;) 返回列表中的最小值 返回以下数字列表中的最小值：\nSELECT LEAST(3, 12, 34, 8, 25); \u0026ndash; 3\n返回以下字符串列表中的最小值：\nSELECT LEAST(\u0026ldquo;Google\u0026rdquo;, \u0026ldquo;Runoob\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;); \u0026ndash; Apple LN 返回数字的自然对数，以 e 为底。 返回 2 的自然对数：\nSELECT LN(2); \u0026ndash; 0.6931471805599453 LOG(x) 或 LOG(base, x) 返回自然对数(以 e 为底的对数)，如果带有 base 参数，则 base 为指定带底数。 SELECT LOG(20.085536923188) \u0026ndash; 3 SELECT LOG(2, 4); \u0026ndash; 2 LOG10(x) 返回以 10 为底的对数 SELECT LOG10(100) \u0026ndash; 2 LOG2(x) 返回以 2 为底的对数 返回以 2 为底 6 的对数：\nSELECT LOG2(6); \u0026ndash; 2.584962500721156 MAX(expression) 返回字段 expression 中的最大值 返回数据表 Products 中字段 Price 的最大值：\nSELECT MAX(Price) AS LargestPrice FROM Products; MIN(expression) 返回字段 expression 中的最小值 返回数据表 Products 中字段 Price 的最小值：\nSELECT MIN(Price) AS MinPrice FROM Products; MOD(x,y) 返回 x 除以 y 以后的余数 5 除于 2 的余数：\nSELECT MOD(5,2) \u0026ndash; 1 PI() 返回圆周率(3.141593） SELECT PI() \u0026ndash;3.141593 POW(x,y) 返回 x 的 y 次方 2 的 3 次方：\nSELECT POW(2,3) \u0026ndash; 8 POWER(x,y) 返回 x 的 y 次方 2 的 3 次方：\nSELECT POWER(2,3) \u0026ndash; 8 RADIANS(x) 将角度转换为弧度 180 度转换为弧度：\nSELECT RADIANS(180) \u0026ndash; 3.1415926535898 RAND() 返回 0 到 1 的随机数 SELECT RAND() \u0026ndash;0.93099315644334 ROUND(x [,y]) 返回离 x 最近的整数，可选参数 y 表示要四舍五入的小数位数，如果省略，则返回整数。 SELECT ROUND(1.23456) \u0026ndash;1 SELECT ROUND(345.156, 2) \u0026ndash; 345.16 SIGN(x) 返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1 SELECT SIGN(-10) \u0026ndash; (-1) SIN(x) 求正弦值(参数是弧度) SELECT SIN(RADIANS(30)) \u0026ndash; 0.5 SQRT(x) 返回x的平方根 25 的平方根：\nSELECT SQRT(25) \u0026ndash; 5 SUM(expression) 返回指定字段的总和 计算 OrderDetails 表中字段 Quantity 的总和：\nSELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails; TAN(x) 求正切值(参数是弧度) SELECT TAN(1.75); \u0026ndash; -5.52037992250933 TRUNCATE(x,y) 返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入） SELECT TRUNCATE(1.23456,3) \u0026ndash; 1.234 # MySQL 日期函数 函数名 描述 实例 ADDDATE(d,n) 计算起始日期 d 加上 n 天的日期 SELECT ADDDATE(\u0026ldquo;2017-06-15\u0026rdquo;, INTERVAL 10 DAY); -\u0026gt;2017-06-25 ADDTIME(t,n) n 是一个时间表达式，时间 t 加上时间表达式 n 加 5 秒：\nSELECT ADDTIME(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;, 5); -\u0026gt;2011-11-11 11:11:16 (秒)\n添加 2 小时, 10 分钟, 5 秒:\nSELECT ADDTIME(\u0026ldquo;2020-06-15 09:34:21\u0026rdquo;, \u0026ldquo;2:10:5\u0026rdquo;); -\u0026gt; 2020-06-15 11:44:26 CURDATE() 返回当前日期 SELECT CURDATE(); -\u0026gt; 2018-09-19 CURRENT_DATE() 返回当前日期 SELECT CURRENT_DATE(); -\u0026gt; 2018-09-19 CURRENT_TIME 返回当前时间 SELECT CURRENT_TIME(); -\u0026gt; 19:59:02 CURRENT_TIMESTAMP() 返回当前日期和时间 SELECT CURRENT_TIMESTAMP() -\u0026gt; 2018-09-19 20:57:43 CURTIME() 返回当前时间 SELECT CURTIME(); -\u0026gt; 19:59:02 DATE() 从日期或日期时间表达式中提取日期值 SELECT DATE(\u0026ldquo;2017-06-15\u0026rdquo;); -\u0026gt; 2017-06-15 DATEDIFF(d1,d2) 计算日期 d1-\u0026gt;d2 之间相隔的天数 SELECT DATEDIFF(\u0026lsquo;2001-01-01\u0026rsquo;,\u0026lsquo;2001-02-02\u0026rsquo;) -\u0026gt; -32 DATE_ADD(d，INTERVAL expr type) 计算起始日期 d 加上一个时间段后的日期，type 值可以是：\n- MICROSECOND\n- SECOND\n- MINUTE\n- HOUR\n- DAY\n- WEEK\n- MONTH\n- QUARTER\n- YEAR\n- SECOND_MICROSECOND\n- MINUTE_MICROSECOND\n- MINUTE_SECOND\n- HOUR_MICROSECOND\n- HOUR_SECOND\n- HOUR_MINUTE\n- DAY_MICROSECOND\n- DAY_SECOND\n- DAY_MINUTE\n- DAY_HOUR\n- YEAR_MONTH\nSELECT DATE_ADD(\u0026ldquo;2017-06-15\u0026rdquo;, INTERVAL 10 DAY); -\u0026gt; 2017-06-25 SELECT DATE_ADD(\u0026ldquo;2017-06-15 09:34:21\u0026rdquo;, INTERVAL 15 MINUTE); -\u0026gt; 2017-06-15 09:49:21 SELECT DATE_ADD(\u0026ldquo;2017-06-15 09:34:21\u0026rdquo;, INTERVAL -3 HOUR); -\u0026gt;2017-06-15 06:34:21 SELECT DATE_ADD(\u0026ldquo;2017-06-15 09:34:21\u0026rdquo;, INTERVAL -3 MONTH); -\u0026gt;2017-04-15 DATE_FORMAT(d,f) 按表达式 f的要求显示日期 d SELECT DATE_FORMAT(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;,\u0026rsquo;%Y-%m-%d %r\u0026rsquo;) -\u0026gt; 2011-11-11 11:11:11 AM DATE_SUB(date,INTERVAL expr type) 函数从日期减去指定的时间间隔。 Orders 表中 OrderDate 字段减去 2 天：\nSELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders DAY(d) 返回日期值 d 的日期部分 SELECT DAY(\u0026ldquo;2017-06-15\u0026rdquo;); -\u0026gt; 15 DAYNAME(d) 返回日期 d 是星期几，如 Monday,Tuesday SELECT DAYNAME(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt;Friday DAYOFMONTH(d) 计算日期 d 是本月的第几天 SELECT DAYOFMONTH(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt;11 DAYOFWEEK(d) 日期 d 今天是星期几，1 星期日，2 星期一，以此类推 SELECT DAYOFWEEK(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt;6 DAYOFYEAR(d) 计算日期 d 是本年的第几天 SELECT DAYOFYEAR(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt;315 EXTRACT(type FROM d) 从日期 d 中获取指定的值，type 指定返回的值。\ntype可取值为MICROSECOND\n- SECOND\n- MINUTE\n- HOUR\n- DAY\n- WEEK\n- MONTH\n- QUARTER\n- YEAR\n- SECOND_MICROSECOND\n- MINUTE_MICROSECOND\n- MINUTE_SECOND\n- HOUR_MICROSECOND\n- HOUR_SECOND\n- HOUR_MINUTE\n- DAY_MICROSECOND\n- DAY_SECOND\n- DAY_MINUTE\n- DAY_HOUR\n- YEAR_MONTH SELECT EXTRACT(MINUTE FROM \u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt; 11 FROM_DAYS(n) 计算从 0000 年 1 月 1 日开始 n 天后的日期 SELECT FROM_DAYS(1111) -\u0026gt; 0003-01-16 HOUR(t) 返回 t 中的小时值 SELECT HOUR(\u0026lsquo;1:2:3\u0026rsquo;) -\u0026gt; 1 LAST_DAY(d) 返回给给定日期的那一月份的最后一天 SELECT LAST_DAY(\u0026ldquo;2017-06-20\u0026rdquo;); -\u0026gt; 2017-06-30 LOCALTIME() 返回当前日期和时间 SELECT LOCALTIME() -\u0026gt; 2018-09-19 20:57:43 LOCALTIMESTAMP() 返回当前日期和时间 SELECT LOCALTIMESTAMP() -\u0026gt; 2018-09-19 20:57:43 MAKEDATE(year, day-of-year) 基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期 SELECT MAKEDATE(2017, 3); -\u0026gt; 2017-01-03 MAKETIME(hour, minute, second) 组合时间，参数分别为小时、分钟、秒 SELECT MAKETIME(11, 35, 4); -\u0026gt; 11:35:04 MICROSECOND(date) 返回日期参数所对应的微秒数 SELECT MICROSECOND(\u0026ldquo;2017-06-20 09:34:00.000023\u0026rdquo;); -\u0026gt; 23 MINUTE(t) 返回 t 中的分钟值 SELECT MINUTE(\u0026lsquo;1:2:3\u0026rsquo;) -\u0026gt; 2 MONTHNAME(d) 返回日期当中的月份名称，如 November SELECT MONTHNAME(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt; November MONTH(d) 返回日期d中的月份值，1 到 12 SELECT MONTH(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt;11 NOW() 返回当前日期和时间 SELECT NOW() -\u0026gt; 2018-09-19 20:57:43 PERIOD_ADD(period, number) 为 年-月 组合日期添加一个时段 SELECT PERIOD_ADD(201703, 5); -\u0026gt; 201708 PERIOD_DIFF(period1, period2) 返回两个时段之间的月份差值 SELECT PERIOD_DIFF(201710, 201703); -\u0026gt; 7 QUARTER(d) 返回日期d是第几季节，返回 1 到 4 SELECT QUARTER(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt; 4 SECOND(t) 返回 t 中的秒钟值 SELECT SECOND(\u0026lsquo;1:2:3\u0026rsquo;) -\u0026gt; 3 SEC_TO_TIME(s) 将以秒为单位的时间 s 转换为时分秒的格式 SELECT SEC_TO_TIME(4320) -\u0026gt; 01:12:00 STR_TO_DATE(string, format_mask) 将字符串转变为日期 SELECT STR_TO_DATE(\u0026ldquo;August 10 2017\u0026rdquo;, \u0026ldquo;%M %d %Y\u0026rdquo;); -\u0026gt; 2017-08-10 SUBDATE(d,n) 日期 d 减去 n 天后的日期 SELECT SUBDATE(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;, 1) -\u0026gt;2011-11-10 11:11:11 (默认是天) SUBTIME(t,n) 时间 t 减去 n 秒的时间 SELECT SUBTIME(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;, 5) -\u0026gt;2011-11-11 11:11:06 (秒) SYSDATE() 返回当前日期和时间 SELECT SYSDATE() -\u0026gt; 2018-09-19 20:57:43 TIME(expression) 提取传入表达式的时间部分 SELECT TIME(\u0026ldquo;19:30:10\u0026rdquo;); -\u0026gt; 19:30:10 TIME_FORMAT(t,f) 按表达式 f 的要求显示时间 t SELECT TIME_FORMAT(\u0026lsquo;11:11:11\u0026rsquo;,\u0026rsquo;%r\u0026rsquo;) 11:11:11 AM TIME_TO_SEC(t) 将时间 t 转换为秒 SELECT TIME_TO_SEC(\u0026lsquo;1:12:00\u0026rsquo;) -\u0026gt; 4320 TIMEDIFF(time1, time2) 计算时间差值 mysql\u0026gt; SELECT TIMEDIFF(\u0026ldquo;13:10:11\u0026rdquo;, \u0026ldquo;13:10:计算日期10\u0026rdquo;); -\u0026gt; 00:00:01 mysql\u0026gt; SELECT TIMEDIFF(\u0026lsquo;2000:01:01 00:00:00\u0026rsquo;, -\u0026gt; \u0026lsquo;2000:01:01 00:00:00.000001\u0026rsquo;); -\u0026gt; \u0026lsquo;-00:00:00.000001\u0026rsquo; mysql\u0026gt; SELECT TIMEDIFF(\u0026lsquo;2008-12-31 23:59:59.000001\u0026rsquo;, -\u0026gt; \u0026lsquo;2008-12-30 01:01:01.000002\u0026rsquo;); -\u0026gt; \u0026lsquo;46:58:57.999999\u0026rsquo; TIMESTAMP(expression, interval) 单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和 mysql\u0026gt; SELECT TIMESTAMP(\u0026ldquo;2017-07-23\u0026rdquo;, \u0026ldquo;13:10:11\u0026rdquo;); -\u0026gt; 2017-07-23 13:10:11 mysql\u0026gt; SELECT TIMESTAMP(\u0026lsquo;2003-12-31\u0026rsquo;); -\u0026gt; \u0026lsquo;2003-12-31 00:00:00\u0026rsquo; mysql\u0026gt; SELECT TIMESTAMP(\u0026lsquo;2003-12-31 12:00:00\u0026rsquo;,\u0026lsquo;12:00:00\u0026rsquo;); -\u0026gt; \u0026lsquo;2004-01-01 00:00:00\u0026rsquo; TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2) 计算时间差，返回 datetime_expr2 − datetime_expr1 的时间差 mysql\u0026gt; SELECT TIMESTAMPDIFF(DAY,\u0026lsquo;2003-02-01\u0026rsquo;,\u0026lsquo;2003-05-01\u0026rsquo;); // 计算两个时间相隔多少天 -\u0026gt; 89 mysql\u0026gt; SELECT TIMESTAMPDIFF(MONTH,\u0026lsquo;2003-02-01\u0026rsquo;,\u0026lsquo;2003-05-01\u0026rsquo;); // 计算两个时间相隔多少月 -\u0026gt; 3 mysql\u0026gt; SELECT TIMESTAMPDIFF(YEAR,\u0026lsquo;2002-05-01\u0026rsquo;,\u0026lsquo;2001-01-01\u0026rsquo;); // 计算两个时间相隔多少年 -\u0026gt; -1 mysql\u0026gt; SELECT TIMESTAMPDIFF(MINUTE,\u0026lsquo;2003-02-01\u0026rsquo;,\u0026lsquo;2003-05-01 12:05:55\u0026rsquo;); // 计算两个时间相隔多少分钟 -\u0026gt; 128885 TO_DAYS(d) 计算日期 d 距离 0000 年 1 月 1 日的天数 SELECT TO_DAYS(\u0026lsquo;0001-01-01 01:01:01\u0026rsquo;) -\u0026gt; 366 WEEK(d) 计算日期 d 是本年的第几个星期，范围是 0 到 53 SELECT WEEK(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt; 45 WEEKDAY(d) 日期 d 是星期几，0 表示星期一，1 表示星期二 SELECT WEEKDAY(\u0026ldquo;2017-06-15\u0026rdquo;); -\u0026gt; 3 WEEKOFYEAR(d) 计算日期 d 是本年的第几个星期，范围是 0 到 53 SELECT WEEKOFYEAR(\u0026lsquo;2011-11-11 11:11:11\u0026rsquo;) -\u0026gt; 45 YEAR(d) 返回年份 SELECT YEAR(\u0026ldquo;2017-06-15\u0026rdquo;); -\u0026gt; 2017 YEARWEEK(date, mode) 返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推 SELECT YEARWEEK(\u0026ldquo;2017-06-15\u0026rdquo;); -\u0026gt; 201724 # MySQL 高级函数 函数名 描述 实例 BIN(x) 返回 x 的二进制编码 15 的 2 进制编码:\nSELECT BIN(15); \u0026ndash; 1111 BINARY(s) 将字符串 s 转换为二进制字符串 SELECT BINARY \u0026ldquo;RUNOOB\u0026rdquo;; -\u0026gt; RUNOOB CASE expression WHEN condition1 THEN result1 WHEN condition2 THEN result2 \u0026hellip; WHEN conditionN THEN resultN ELSE result END CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。 SELECT CASE WHEN 1 \u0026gt; 0 THEN \u0026lsquo;1 \u0026gt; 0\u0026rsquo; WHEN 2 \u0026gt; 0 THEN \u0026lsquo;2 \u0026gt; 0\u0026rsquo; ELSE \u0026lsquo;3 \u0026gt; 0\u0026rsquo; END -\u0026gt;1 \u0026gt; 0 CAST(x AS type) 转换数据类型 字符串日期转换为日期：\nSELECT CAST(\u0026ldquo;2017-08-29\u0026rdquo; AS DATE); -\u0026gt; 2017-08-29 COALESCE(expr1, expr2, \u0026hellip;., expr_n) 返回参数中的第一个非空表达式（从左向右） SELECT COALESCE(NULL, NULL, NULL, \u0026lsquo;runoob.com\u0026rsquo;, NULL, \u0026lsquo;google.com\u0026rsquo;); -\u0026gt; runoob.com CONNECTION_ID() 返回唯一的连接 ID SELECT CONNECTION_ID(); -\u0026gt; 4292835 CONV(x,f1,f2) 返回 f1 进制数变成 f2 进制数 SELECT CONV(15, 10, 2); -\u0026gt; 1111 CONVERT(s USING cs) 函数将字符串 s 的字符集变成 cs SELECT CHARSET(\u0026lsquo;ABC\u0026rsquo;) -\u0026gt;utf-8 SELECT CHARSET(CONVERT(\u0026lsquo;ABC\u0026rsquo; USING gbk)) -\u0026gt;gbk CURRENT_USER() 返回当前用户 SELECT CURRENT_USER(); -\u0026gt; guest@% DATABASE() 返回当前数据库名 SELECT DATABASE(); -\u0026gt; runoob IF(expr,v1,v2) 如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。 SELECT IF(1 \u0026gt; 0,\u0026lsquo;正确\u0026rsquo;,\u0026lsquo;错误\u0026rsquo;) -\u0026gt;正确 IFNULL(v1,v2) 如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。 SELECT IFNULL(null,\u0026lsquo;Hello Word\u0026rsquo;) -\u0026gt;Hello Word ISNULL(expression) 判断表达式是否为 NULL SELECT ISNULL(NULL); -\u0026gt;1 LAST_INSERT_ID() 返回最近生成的 AUTO_INCREMENT 值 SELECT LAST_INSERT_ID(); -\u0026gt;6 NULLIF(expr1, expr2) 比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1 SELECT NULLIF(25, 25); -\u0026gt; SESSION_USER() 返回当前用户 SELECT SESSION_USER(); -\u0026gt; guest@% SYSTEM_USER() 返回当前用户 SELECT SYSTEM_USER(); -\u0026gt; guest@% USER() 返回当前用户 SELECT USER(); -\u0026gt; guest@% VERSION() 返回数据库的版本号 SELECT VERSION() -\u0026gt; 5.6.34 ","date":"2022-12-25T00:00:00Z","permalink":"https://zhaochengcube.github.io/post/mysql%E5%87%BD%E6%95%B0/","title":"MySQL函数"}]